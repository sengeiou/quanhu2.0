package com.rz.httpapi.bean;


// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "FRIEND_INFO".
 */
public class FriendInfo extends BaseInfo {

    private String custId;
    private String custPhone;
    private String custNo;
    private String firstLetter;
    private String custName;
    private String custNname;
    private String custImg;
    private String custSignature;
    private String nameNotes;
    private Integer relation;

    /**
     * Used to resolve relations
     */
//    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
//    private transient FriendInfoDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public FriendInfo() {
    }

    public FriendInfo(String custId) {
        this.custId = custId;
    }

    public FriendInfo(String custId, String custPhone, String custNo, String firstLetter, String custName, String custNname, String custImg, String custSignature, String nameNotes, Integer relation) {
        this.custId = custId;
        this.custPhone = custPhone;
        this.custNo = custNo;
        this.firstLetter = firstLetter;
        this.custName = custName;
        this.custNname = custNname;
        this.custImg = custImg;
        this.custSignature = custSignature;
        this.nameNotes = nameNotes;
        this.relation = relation;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
//    public void __setDaoSession(DaoSession daoSession) {
////        this.daoSession = daoSession;
////        myDao = daoSession != null ? daoSession.getFriendInfoDao() : null;
//    }

    public String getCustId() {
        return custId;
    }

    public void setCustId(String custId) {
        this.custId = custId;
    }

    public String getCustPhone() {
        return custPhone;
    }

    public void setCustPhone(String custPhone) {
        this.custPhone = custPhone;
    }

    public String getCustNo() {
        return custNo;
    }

    public void setCustNo(String custNo) {
        this.custNo = custNo;
    }

    public String getFirstLetter() {
        return firstLetter;
    }

    public void setFirstLetter(String firstLetter) {
        this.firstLetter = firstLetter;
    }

    public String getCustName() {
        return custName;
    }

    public void setCustName(String custName) {
        this.custName = custName;
    }

    public String getCustNname() {
        return custNname;
    }

    public void setCustNname(String custNname) {
        this.custNname = custNname;
    }

    public String getCustImg() {
        return custImg;
    }

    public void setCustImg(String custImg) {
        this.custImg = custImg;
    }

    public String getCustSignature() {
        return custSignature;
    }

    public void setCustSignature(String custSignature) {
        this.custSignature = custSignature;
    }

    public String getNameNotes() {
        return nameNotes;
    }

    public void setNameNotes(String nameNotes) {
        this.nameNotes = nameNotes;
    }

    public Integer getRelation() {
        return relation;
    }

    public void setRelation(Integer relation) {
        this.relation = relation;
    }

//    /**
//     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
//     */
    public void delete() {
//        if (myDao == null) {
//            throw new DaoException("Entity is detached from DAO context");
//        }
//        myDao.delete(this);
    }

//    /**
//     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
//     */
    public void update() {
//        if (myDao == null) {
//            throw new DaoException("Entity is detached from DAO context");
//        }
//        myDao.update(this);
    }

//    /**
//     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
//     */
    public void refresh() {
//        if (myDao == null) {
//            throw new DaoException("Entity is detached from DAO context");
//        }
//        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
